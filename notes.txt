What Needs to Change in Your Current Code
üîß 1. Replace simulateBackendProcessing() with a real backend call
Instead of generating mock data, call your real backend endpoint:

ts
Copy
Edit
function processProgramInfo(programData: ProgramData): void {
  chrome.storage.local.get(['programCache'], (result) => {
    const cache = result.programCache || {};
    const cacheKey = programData.url;

    if (cache[cacheKey]) {
      showProgramOverlay(cache[cacheKey]);
      return;
    }

    chrome.storage.sync.get(['userProfile'], (res) => {
      const userProfile = res.userProfile || {};

      fetch(`${BACKEND_API}/match`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          programData,
          userProfile
        })
      })
      .then(res => res.json())
      .then((enhancedData: EnhancedProgramData) => {
        cache[cacheKey] = enhancedData;
        chrome.storage.local.set({ programCache: cache });
        showProgramOverlay(enhancedData);
      })
      .catch(err => {
        console.error('GradMatch: Error connecting to backend', err);
      });
    });
  });
}
üß† 2. Your backend should do:
Extract & enrich page data using LLMs or heuristics.

Compare with user profile (GPA, field of interest, etc.).

Estimate match (ranking, likelihood, etc.).

Return enhanced program object with advisors, funding info, etc.

üõ†Ô∏è Backend Sketch (for /match endpoint)
ts
Copy
Edit
// POST /match
// Input: { programData, userProfile }

1. Use NLP/AI to interpret `programData.bodyText`
   ‚Üí Extract research areas, degree level, funding mentions

2. Compare with `userProfile`:
   - GPA vs required
   - Research fit
   - Location or preferences (if present)

3. Score and enrich:
   - Add advisors, estimated GPA, etc.
   - Add a likelihood score

4. Return full EnhancedProgramData
üîÑ Optional Enhancements:
Use OpenAI or other LLM APIs for page parsing

Add embedding-based matching (e.g., program text ‚Üí vector, compare with user interest vector)

Use edge caching to store processed programs for other users



//   # new manifest.json file 
//   {
//   "manifest_version": 3,
//   "name": "GradMatch",
//   "version": "1.0",
//   "action": {
//     "default_popup": "popup.html"
//   },
//   "background": {
//     "service_worker": "dist/background.js"
//   },
//   "content_scripts": [
//     {
//       "matches": ["<all_urls>"],
//       "js": ["dist/content.js"]
//     }
//   ],
//   "permissions": ["storage", "tabs", "scripting"]
// }

<script src="../js/popup.js"></script> !


Progress 1:
//   const BACKEND_API = 'https://your-backend-api.com/api'; // Replace with your backend API URL